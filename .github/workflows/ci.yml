name: CI
run-name: |
  CI test (${{inputs.uno-middleware||'default'}}, ${{inputs.base-image}}, ${{inputs.build-platform}}) ${{inputs.run-unit && '[U]' || ''}}${{inputs.run-unit && '[I]' || ''}}[${{github.ref_name}}${{github.ref_type == 'branch' && '@' || ''}}${{github.ref_type == 'branch' && github.sha || ''}}]

on:
  workflow_call:
    inputs:
      uno-middleware:
        type: string
      base-image:
        type: string
        required: true
      build-platform:
        type: string
        required: true
      run-unit:
        type: boolean
        default: true
      run-integration:
        type: boolean
        default: true
      test-without-license:
        type: boolean
        default: false

  workflow_dispatch:
    inputs:
      uno-middleware:
        description: "uno middleware plugin"
        type: string
      base-image:
        description: "base OS image"
        type: string
        required: true
      build-platform:
        description: "linux build platform"
        type: string
        required: true
      run-unit:
        description: "run unit tests"
        type: boolean
        default: true
      run-integration:
        description: "run integration tests"
        type: boolean
        default: true
      test-without-license:
        description: "test also without an RTI license"
        type: boolean
        default: true

concurrency:
  group: ci-build-${{ github.ref }}-${{ inputs.uno-middleware || 'default' }}-${{ inputs.build-platform }}-${{ inputs.base-image }}-${{inputs.test-without-license}}
  cancel-in-progress: true

permissions:
  contents: read
  packages: read

env:
  DEBUG: ''
  VERBOSITY: ''

jobs:
  config:
    runs-on: ubuntu-latest
    outputs:
      RUNNER: ${{ fromJson(steps.config.outputs.RUNNER) }}
      BUILD_ID: ${{ steps.config.outputs.BUILD_ID }}
      TEST_ARTIFACT: ${{ steps.config.outputs.TEST_ARTIFACT }}
      TEST_IMAGE: ${{ steps.config.outputs.TEST_IMAGE }}
      TEST_BASE_IMAGE: ${{ steps.config.outputs.TEST_BASE_IMAGE }}
    steps:
      - name: Clone uno
        uses: actions/checkout@v4
        with:
          path: src/uno
          submodules: true

      - name: Generate build and test configuration
        id: config
        run: |
          case "${{github.ref_type}}" in
            tag)
              image_version=${{github.ref_name}}
              build_type=release
              ;;
            *)
              sha_short=$(cd src/uno && git rev-parse --short HEAD)
              image_version=${{github.ref_name}}@${sha_short}
              case "${{github.ref_name}}" in
                master)
                  build_type=nightly
                  ;;
                *)
                  build_type=test
                  ;;
              esac
              ;;
          esac
          image_version="$(echo ${image_version} | tr / -)"
          build_id=$(date +%Y%m%d-%H%M%S)
          middleware_id=$(echo ${{inputs.uno-middleware}} | sed -e 's/uno.middleware.//')
          test_artifact=uno-ci-${build_type}-${middleware_id:-default}-${{ inputs.build-platform }}__${image_version}__${build_id}
          test_image=${{ github.repository }}-test-runner:latest
          base_image_tag=$(echo "${{ inputs.base-image }}" | tr : -)
          test_base_image=ghcr.io/mentalsmash/uno-ci-base-tester:${base_image_tag}
          (
            case "${{ inputs.build-platform }}" in
              arm64)
                case "${{inputs.test-without-license}}" in
                  false)
                    # Force full test suite to run on "beefier" rpi5 nodes
                    printf -- "RUNNER='%s'\n" '["self-hosted", "linux", "arm64", "rpi5"]'
                    ;;
                  true)
                    # Other test suites can run on any arm64 node
                    printf -- "RUNNER='%s'\n" '["self-hosted", "linux", "arm64"]'
                    ;;
                esac
                ;;
              amd64)
                printf -- "RUNNER='%s'\n" '"ubuntu-latest"'
                ;;
            esac
            echo TEST_ARTIFACT=${test_artifact}
            echo TEST_IMAGE=${test_image}
            echo TEST_BASE_IMAGE=${test_base_image}
            echo BUILD_ID=${build_id}
          ) >> ${GITHUB_OUTPUT}

  build-n-test:
    needs: config
    runs-on: ${{ fromJson(needs.config.outputs.RUNNER) }}
    steps:
      - name: Clone uno
        uses: actions/checkout@v4
        with:
          path: src/uno
          submodules: true

      - name: Bootstrap uno with poetry
        run: |
          python3 -m venv poetry-venv
          . poetry-venv/bin/activate
          pip3 install -U poetry
          deactivate
          cd src/uno
          ${GITHUB_WORKSPACE}/poetry-venv/bin/poetry install --with=dev
          . .venv/bin/activate
          case '${{ inputs.uno-middleware }}' in
            '')
              pip3 install -U rti.connext
              ;;
            *)
              pip3 install -U -e plugins/${{ inputs.uno-middleware }}
              ;;
          esac

      - name: Validate code
        run: |
          . src/uno/.venv/bin/activate
          ruff check

      - name: Validate code format
        run: |
          . src/uno/.venv/bin/activate
          ruff format --check

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Log in to GitHub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build tester image
        uses: docker/build-push-action@v5
        with:
          file: src/uno/docker/Dockerfile
          tags: ${{ needs.config.outputs.TEST_IMAGE }}
          load: true
          context: src/uno
          platforms: linux/${{ inputs.build-platform }}
          build-args: |
            TEST=y
            BASE_IMAGE=${{ needs.config.outputs.TEST_BASE_IMAGE }}
            UNO_MIDDLEWARE=${{ inputs.uno-middleware }}

      - name: Run unit tests
        if: inputs.run-unit
        run: |
          mkdir -p test-results
          docker run --rm \
            -v $(pwd):/workspace \
            -w /workspace \
            -e VERBOSITY=${{ env.VERBOSITY }} \
            -e DEBUG=${{ env.DEBUG }} \
            -e EXPECT_MIDDLEWARE=${{ inputs.uno-middleware || 'uno.middleware.connext' }} \
            ${{ needs.config.outputs.TEST_IMAGE }} \
            pytest -s -v --junit-xml=test-results/uno-test-results-unit-${{ needs.config.outputs.BUILD_ID }}.xml \
              src/uno/test/unit

      - name: Run unit tests (without license)
        if: inputs.run-unit && inputs.test-without-license
        run: |
          mkdir -p test-results
          docker run --rm \
            -v $(pwd):/workspace \
            -w /workspace \
            -e VERBOSITY=${{ env.VERBOSITY }} \
            -e DEBUG=${{ env.DEBUG }} \
            -e EXPECT_MIDDLEWARE= \
            ${{ needs.config.outputs.TEST_IMAGE }} \
            sh -c "rm /rti_license.dat && unset RTI_LICENSE_FILE && pytest -s -v --junit-xml=test-results/uno-test-results-unit-${{ needs.config.outputs.BUILD_ID }}-static.xml src/uno/test/unit"

      - name: Restore permissions changed by unit tests
        if: ${{ inputs.run-unit && always() }}
        run: |
          docker run --rm \
            -v $(pwd):/workspace \
            ${{ needs.config.outputs.TEST_IMAGE }} \
            fix-root-permissions $(id -u):$(id -g) /workspace

      - name: Set up integration tests
        if: ${{ inputs.run-integration }}
        run: |
          docker run --rm \
            -v $(pwd):/workspace \
            ${{ needs.config.outputs.TEST_IMAGE }} \
            cp /rti_license.dat /workspace/rti_license.dat

      - name: Run integration tests
        if: inputs.run-integration
        run: |
          mkdir -p test-results
          . src/uno/.venv/bin/activate
          pytest -s -v --junit-xml=test-results/uno-test-results-integration-${{ needs.config.outputs.BUILD_ID }}.xml \
            src/uno/test/integration
        env:
          UNO_MIDDLEWARE: ${{ inputs.uno-middleware }}
          EXPECT_MIDDLEWARE: ${{ inputs.uno-middleware || 'uno.middleware.connext' }}
      
      - name: Restore permissions changed by integration tests
        if: ${{ inputs.run-integration && always() }}
        run: |
          docker run --rm \
            -v $(pwd):/workspace \
            ${{ needs.config.outputs.TEST_IMAGE }} \
            fix-root-permissions $(id -u):$(id -g) /workspace
      
      - name: Run integration tests (without license)
        if: inputs.run-integration && inputs.test-without-license
        run: |
          rm rti_license.dat
          mkdir -p test-results
          . src/uno/.venv/bin/activate
          pytest -s -v --junit-xml=test-results/uno-test-results-integration-${{ needs.config.outputs.BUILD_ID }}-static.xml \
            src/uno/test/integration
        env:
          UNO_MIDDLEWARE: ${{ inputs.uno-middleware }}
          EXPECT_MIDDLEWARE: ${{ inputs.uno-middleware || '' }}

      - name: Restore permissions changed by integration tests
        if: ${{ inputs.run-integration && always() }}
        run: |
          docker run --rm \
            -v $(pwd):/workspace \
            ${{ needs.config.outputs.TEST_IMAGE }} \
            fix-root-permissions $(id -u):$(id -g) /workspace

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.config.outputs.TEST_ARTIFACT }}
          path: test-results/*
        if: ${{ always() }}

