name: CI

on:
  workflow_call:
    inputs:
      uno-middleware:
        type: string
        required: true
      base-image:
        type: string
        required: true
      build-platform:
        type: string
        required: true
      run-unit:
        type: boolean
        default: true
      run-integration:
        type: boolean
        default: true

  workflow_dispatch:
    inputs:
      uno-middleware:
        description: "uno middleware plugin"
        type: string
        required: true
      base-image:
        description: "base OS image"
        type: string
        required: true
      build-platform:
        description: "linux build platform"
        type: string
        required: true
      run-unit:
        description: "run unit tests"
        type: boolean
        default: true
      run-integration:
        description: "run integration tests"
        type: boolean
        default: true

concurrency:
  group: ci-build-${{ github.ref }}-${{ inputs.uno-middleware }}-${{ inputs.build-platform }}-${{ inputs.base-image }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  config:
    runs-on: ubuntu-latest
    outputs:
      RUNNER: ${{ fromJson(steps.config.outputs.RUNNER) }}
      BUILD_ID: ${{ steps.config.outputs.BUILD_ID }}
      TEST_ARTIFACT: ${{ steps.config.outputs.TEST_ARTIFACT }}
      TEST_IMAGE: ${{ steps.config.outputs.TEST_IMAGE }}
    steps:
      - name: Clone uno
        uses: actions/checkout@v4
        with:
          path: src/uno
          submodules: true

      - name: Generate build and test configuration
        id: config
        run: |
          case "${{ inputs.uno-middleware }}" in
            uno.middleware.native)
              middleware_type=static
              ;;
            *)
              middleware_type=default
              ;;
          esac
          case "${{github.ref_type}}" in
            tag)
              image_version=${{github.ref_name}}
              build_type=release
              ;;
            *)
              sha_short=$(cd src/uno && git rev-parse --short HEAD)
              image_version=${{github.ref_name}}@${sha_short}
              case "${{github.ref_name}}" in
                master)
                  build_type=nightly
                  ;;
                *)
                  build_type=test
                  ;;
              esac
              ;;
          esac
          image_version="$(echo ${image_version} | tr / -)"
          build_id=$(date +%Y%m%d-%H%M%S)
          test_artifact=uno-ci-${build_type}-${{ inputs.build-platform }}__${image_version}__${build_id}
          test_image=${{ github.repository }}-test-runner:latest
          (
            case "${{ inputs.build-platform }}" in
              arm64)
                printf -- "RUNNER='%s'\n" '["self-hosted", "linux", "arm64"]'
                ;;
              amd64)
                printf -- "RUNNER='%s'\n" '"ubuntu-latest"'
                ;;
            esac
            echo TEST_ARTIFACT=${test_artifact}
            echo TEST_IMAGE=${test_image}
            echo BUILD_ID=${build_id}
          ) >> ${GITHUB_OUTPUT}

  build-n-test:
    needs: config
    runs-on: ${{ fromJson(needs.config.outputs.RUNNER) }}
    steps:
      - name: Clone uno
        uses: actions/checkout@v4
        with:
          path: src/uno
          submodules: true

      - name: Clone build support files
        uses: actions/checkout@v4
        with:
          repository: mentalsmash/uno-ci
          token: ${{ secrets.UNO_CI_PAT }}
          ref: master
          path: src/uno-ci
        if: inputs.uno-middleware == 'uno_middleware_connext'

      - name: Clone ARM support files
        uses: actions/checkout@v4
        with:
          repository: mentalsmash/uno-ci-arm
          token: ${{ secrets.UNO_CI_ARM_PAT }}
          ref: master
          path: src/uno-ci-arm
        if: inputs.build-platform == 'arm64' && inputs.uno-middleware == 'uno_middleware_connext'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Configure build environment
        run: |
          case '${{ inputs.uno-middleware }}' in
            uno_middleware_connext)
              cp src/uno-ci/resource/rti/rti_license.dat rti_license.dat
              case '${{ inputs.build-platform }}' in
                arm64)
                  cp src/uno-ci-arm/resource/rti/rti.connext-7.1.0-cp310-cp310-linux_aarch64.whl \
                     src/uno
                  ;;
              esac
              ;;
          esac
          mkdir -p test-results

      - name: Build tester image
        uses: docker/build-push-action@v5
        with:
          file: src/uno/docker/Dockerfile
          tags: ${{ needs.config.outputs.TEST_IMAGE }}
          load: true
          context: src/uno
          platforms: linux/${{ inputs.build-platform }}
          build-args: |
            TEST=y
            BASE_IMAGE=${{ inputs.base-image }}
            UNO_MIDDLEWARE=${{ inputs.uno-middleware }}

      - name: Run unit tests
        if: inputs.run-unit
        run: |
          docker run --rm \
            -v $(pwd):/workspace \
            -w /workspace \
            -e RTI_LICENSE_FILE=/workspace/rti_license.dat \
            -e LOG_LEVEL=activity \
            -e DEBUG=y \
            ${{ needs.config.outputs.TEST_IMAGE }} \
            pytest -s -v --junit-xml=test-results/uno-test-results-unit-${{ needs.config.outputs.BUILD_ID }}.xml \
              src/uno/test/unit

      - name: Restore permissions changed by unit tests
        if: ${{ inputs.run-unit && always() }}
        run: |
          docker run --rm \
            -v $(pwd):/workspace \
            ${{ needs.config.outputs.TEST_IMAGE }} \
            fix-root-permissions $(id -u):$(id -g) /workspace

      - name: Setup integration tests
        if: inputs.run-integration
        run: |
          python3 -m venv venv
          . venv/bin/activate
          pip3 install -U pip setuptools
          pip3 install -U -e src/uno
          case '${{ inputs.uno-middleware }}' in
            uno.middleware.native)
              ;;
            *)
              if [ '${{ inputs.uno-middleware }}/${{ inputs.build-platform}}' = uno_middleware_connext/arm64 ]; then
                pip3 install src/uno-ci-arm/resource/rti/rti.connext-7.1.0-cp310-cp310-linux_aarch64.whl
              fi
              pip3 install -U -e src/uno/plugins/${{ inputs.uno-middleware }}
              ;;
          esac

      - name: Run integration tests
        if: inputs.run-integration
        run: |
          . venv/bin/activate
          pytest -s -v --junit-xml=test-results/uno-test-results-integration-${{ needs.config.outputs.BUILD_ID }}.xml \
            src/uno/test/integration
        env:
          RTI_LICENSE_FILE: ${{ github.workspace }}/rti_license.dat
          DEBUG: y
          LOG_LEVEL: activity
          UNO_MIDDLEWARE: ${{ inputs.uno-middleware }}

      - name: Restore permissions changed by integration tests
        if: ${{ inputs.run-integration && always() }}
        run: |
          docker run --rm \
            -v $(pwd):/workspace \
            ${{ needs.config.outputs.TEST_IMAGE }} \
            fix-root-permissions $(id -u):$(id -g) /workspace

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.config.outputs.TEST_ARTIFACT }}
          path: test-results/*
        if: ${{ always() }}

