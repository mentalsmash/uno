name: Release Step (Test Image)
run-name: |
  release (${{inputs.flavor}}) - test image ${{inputs.tag}} on ${{inputs.platform}} [${{github.ref_type == 'branch' && 'nightly' || 'stable'}}, ${{github.ref_name}}]

on:
  workflow_call:
    inputs:
      tag:
        type: string
        required: True
      platform:
        type: string
        required: true
      flavor:
        type: string
        required: true

concurrency:
  group: release-test-image-${{ github.ref }}-${{ inputs.tag}}-${{ inputs.platform }}
  cancel-in-progress: true

jobs:
  test_config:
    runs-on: ubuntu-latest
    outputs:
      TEST_ARTIFACT: ${{ steps.config.outputs.TEST_ARTIFACT }}
      TEST_ID: ${{ steps.config.outputs.TEST_ID }}
      TEST_IMAGE: ${{ steps.config.outputs.TEST_IMAGE }}
      RUNNER: ${{ fromJson(steps.config.outputs.RUNNER) }}
      UNO_MIDDLEWARE: ${{ steps.config.outputs.UNO_MIDDLEWARE }}
    steps:
      - name: Clone uno
        uses: actions/checkout@v4
        with:
          path: src/uno
          submodules: true

      - name: Configure test
        id: config
        run: |
          case "${{ inputs.flavor}}" in
            default)
              uno_middleware=uno_middleware_connext
              ;;
            static)
              uno_middleware=uno.middleware.native
              ;;
            *)
              echo "invalid flavor: '${{inputs.flavor}}'"
              exit 1
          esac
          image_tag=$(echo ${{inputs.tag}}  | tr : -)
          case "${{github.ref_type}}" in
            branch)
              sha_short=$(cd src/uno && git rev-parse --short HEAD)
              build_label=nightly
              build_version=${sha_short}
              ;;
            tag)
              build_label=release
              build_version=${{github.ref_name}}
              ;;
          esac
          test_id=$(date +%Y%m%d-%H%M%S)
          test_artifact=uno-test-${{inputs.flavor}}-${{ inputs.platform }}-${build_label}__${build_version}__${test_id}
          test_image=${{ github.repository }}-test-runner:latest
          (
            case "${{ inputs.platform }}" in
              arm64)
                case "${{inputs.flavor}}" in
                  default)
                    # Force full test suite to run on "beefier" rpi5 nodes
                    printf -- "RUNNER='%s'\n" '["self-hosted", "linux", "arm64", "rpi5"]'
                    ;;
                  *)
                    # Other test suites can run on any arm64 node
                    printf -- "RUNNER='%s'\n" '["self-hosted", "linux", "arm64"]'
                    ;;
                esac
                ;;
              amd64)
                printf -- "RUNNER='%s'\n" '"ubuntu-latest"'
                ;;
            esac
            echo TEST_IMAGE=${test_image}
            echo TEST_ARTIFACT=${test_artifact}
            echo TEST_ID=${test_id}
            echo UNO_MIDDLEWARE=${uno_middleware}
          ) >> ${GITHUB_OUTPUT}


  test:
    needs: test_config
    runs-on: ${{ fromJson(needs.test_config.outputs.RUNNER) }}
    steps:
      - name: Clone uno
        uses: actions/checkout@v4
        with:
          path: src/uno
          submodules: true

      - name: Clone support files
        uses: actions/checkout@v4
        with:
          repository: mentalsmash/uno-ci
          token: ${{ secrets.UNO_CI_PAT }}
          ref: master
          path: src/uno-ci

      - name: Configure tester
        id: config
        run: |
          cp src/uno-ci/resource/rti/rti_license.dat rti_license.dat
          
          # Create test results directory
          mkdir -p test-results

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build tester image
        uses: docker/build-push-action@v5
        with:
          file: src/uno/docker/test/Dockerfile
          tags: ${{ needs.test_config.outputs.TEST_IMAGE }}
          load: true
          context: src/uno
          platforms: ${{ inputs.platform }}
          build-args: |
            BASE_IMAGE=ghcr.io/${{ inputs.tag }}
    
      - name: Run unit tests
        run: |
          docker run --rm \
            -v $(pwd):/workspace \
            -w /workspace \
            -e RTI_LICENSE_FILE=/workspace/rti_license.dat \
            -e VERBOSITY=activity \
            -e DEBUG=y \
            ${{ needs.test_config.outputs.TEST_IMAGE }} \
            pytest -s -v --junit-xml=test-results/uno-test-results-unit-${{ needs.test_config.outputs.TEST_ID }}.xml \
              src/uno/test/unit

      - name: Restore permissions changed by unit tests
        if: ${{ always() }}
        run: |
          docker run --rm \
            -v $(pwd):/workspace \
            ${{ needs.test_config.outputs.TEST_IMAGE }} \
            fix-root-permissions $(id -u):$(id -g) /workspace

      - name: Setup integration tests
        run: |
          python3 -m venv venv
          . venv/bin/activate
          pip3 install -U pip setuptools
          pip3 install -U -e src/uno
          case '${{ needs.test_config.outputs.UNO_MIDDLEWARE }}' in
            uno.middleware.native)
              ;;
            *)
              pip3 install -U -e src/uno/plugins/${{ needs.test_config.outputs.UNO_MIDDLEWARE }}
              ;;
          esac

      - name: Run integration tests
        id: integration-tests
        run: |
          . venv/bin/activate
          pytest -s -v --junit-xml=test-results/uno-test-results-integration-${{ needs.test_config.outputs.TEST_ID }}.xml \
            src/uno/test/integration
        env:
          RTI_LICENSE_FILE: ${{ github.workspace }}/rti_license.dat
          DEBUG: y
          VERBOSITY: activity
          UNO_MIDDLEWARE: ${{ needs.test_config.outputs.UNO_MIDDLEWARE }}

      - name: Restore permissions changed by integration tests
        if: ${{ always() }}
        run: |
          docker run --rm \
            -v $(pwd):/workspace \
            ${{ needs.test_config.outputs.TEST_IMAGE }} \
            fix-root-permissions $(id -u):$(id -g) /workspace

      # Always collect and upload available test results
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.test_config.outputs.TEST_ARTIFACT }}
          path: test-results/*
        if: ${{ always() }}
