name: Deb Release (Build & Test)
run-name: |
  deb release (build & test) [${{github.ref_name}}]

on:
  workflow_dispatch:
    inputs:
      base-tag:
        description: Base distribution image
        type: string
        required: true
      platform:
        description: Build platform
        type: string
        required: true
  
  workflow_call:
    inputs:
      base-tag:
        type: string
        required: true
      platform:
        type: string
        required: true

concurrency:
  group: deb-release-${{ github.ref }}-${{inputs.platform}}-${{inputs.base-tag}}
  cancel-in-progress: true

permissions:
  packages: read

jobs:
  config:
    runs-on: ubuntu-latest
    outputs:
      DEB_ARTIFACT: ${{ steps.config.outputs.DEB_ARTIFACT }}
      DEB_BUILDER_TAG: ${{ steps.config.outputs.DEB_BUILDER_TAG }}
      RUNNER: ${{ steps.config.outputs.RUNNER }}
      TEST_ARTIFACT: ${{ steps.config.outputs.TEST_ARTIFACT }}
      TEST_DATE: ${{ steps.config.outputs.TEST_DATE }}
      TEST_ID: ${{ steps.config.outputs.TEST_ID }}
      TEST_IMAGE: ${{ steps.config.outputs.TEST_IMAGE }}
      TEST_RUNNER_ARTIFACT: ${{ steps.config.outputs.TEST_RUNNER_ARTIFACT }}
    steps:
      - name: Clone uno
        uses: actions/checkout@v4
        with:
          path: src/uno
          submodules: true
      
      - name: Generate build configuration
        id: config
        run: |
          case "${{ inputs.platform }}" in
            amd64)
              runner='"ubuntu-latest"'
              ;;
            arm64)
              runner='["self-hosted", "linux", "arm64", "rpi5"]'
              ;;
          esac
          case "${{github.ref_type}}" in
            tag)
              image_version=${{github.ref_name}}
              ;;
            *)
              sha_short=$(cd src/uno && git rev-parse --short HEAD)
              image_version=${{github.ref_name}}@${sha_short}
              ;;
          esac
          image_version="$(echo ${image_version} | tr / -)"
          deb_builder_tag=$(echo ${{inputs.base-tag}} | tr : - | tr / -)
          test_date=$(date +%Y%m%d-%H%M%S)
          test_id=deb-${builder_tag}-${{ inputs.platform }}__${image_version}
          test_artifact=uno-test-${test_id}__${test_date}
          test_runner_artifact=uno-runner-${builder_tag}-${{ inputs.platform }}__${image_version}__${test_date}
          deb_artifact=uno-deb-${builder_tag}-${{ inputs.platform }}__${image_version}__${test_date}
          (
            echo RUNNER=${runner}
            echo DEB_BUILDER_TAG=${deb_builder_tag}
            echo DEB_ARTIFACT=${deb_artifact}
            echo TEST_ARTIFACT=${test_artifact}
            echo TEST_DATE=${test_date}
            echo TEST_ID=${test_id}
            echo TEST_IMAGE=mentalsmash/uno-test-runner:latest
            echo TEST_RUNNER_ARTIFACT=${test_runner_artifact}
          ) >> ${GITHUB_OUTPUT}

  build-packages:
    needs: config
    runs-on: ${{ fromJson(needs.config.outputs.RUNNER) }}
    steps:
    - name: Clone uno
      uses: actions/checkout@v4
      with:
        path: src/uno
        submodules: true

    - name: Log in to GitHub
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build debian packages
      run: |
        make -C src/uno changelog
        make -C src/uno debuild
      env:
        DEB_BUILDER: ghcr.io/mentalsmash/uno-ci-debian-builder:${{ needs.config.outputs.DEB_BUILDER_TAG }}
  
    - name: Upload debian packages
      uses: actions/upload-artifact@v4
      with:
        name: ${{ needs.config.outputs.DEB_ARTIFACT }}
        path: src/uno/debian-dist/*

    - name: Upload test runner
      uses: actions/upload-artifact@v4
      with:
        name: ${{ needs.config.outputs.TEST_RUNNER_ARTIFACT }}
        path: src/uno/dist/bundle/runner

    - name: Fix permissions
      run: |
        docker run --rm \
          -v $(pwd)/src/uno:/uno \
          ghcr.io/mentalsmash/uno-ci-debian-builder:${{ needs.config.outputs.DEB_BUILDER_TAG }} \
          chown -R $(id -u):$(id -g) /uno
      if: always()

  test-packages:
    needs:
      - config
      - build-packages
    runs-on: ${{ fromJson(needs.config.outputs.RUNNER) }}
    env:
      DEB_TESTER: ${{ needs.config.outputs.TEST_IMAGE }}
      FIX_DIR: ${{ github.workspace }}
      RTI_LICENSE_FILE: ${{ github.workspace }}/src/uno-ci/resource/rti/rti_license.dat
      TEST_DATE: ${{ needs.config.outputs.TEST_DATE }}
      TEST_ID: ${{ needs.config.outputs.TEST_ID }}
      TEST_IMAGE: ${{ needs.config.outputs.TEST_IMAGE }}
    steps:
    - name: Clone uno
      uses: actions/checkout@v4
      with:
        path: src/uno
        submodules: true

    - name: Clone support files
      uses: actions/checkout@v4
      with:
        repository: mentalsmash/uno-ci
        token: ${{ secrets.UNO_CI_PAT }}
        ref: master
        path: src/uno-ci

    - name: Download runner artifact
      uses: actions/download-artifact@v4
      with:
        pattern: ${{ needs.config.outputs.TEST_RUNNER_ARTIFACT }}

    - name: Download debian packages artifact
      uses: actions/download-artifact@v4
      with:
        pattern: ${{ needs.config.outputs.DEB_ARTIFACT }}

    - name: Move artifacts in place
      run: |
        mkdir -p src/uno/dist/bundle/runner
        mv -v ${{ needs.config.outputs.TEST_RUNNER_ARTIFACT }}/* \
          src/uno/dist/bundle/runner/

        mkdir -p src/uno/debian-dist
        mv -v uno-${{inputs.platform}}-${{needs.config.outputs.DEB_BUILDER_TAG}}/* \
          src/uno/debian-dist/

    - name: Build tester image
      uses: docker/build-push-action@v5
      with:
        file: src/uno/docker/debian-tester/Dockerfile
        tags: ${{ needs.config.outputs.TEST_IMAGE }}
        load: true
        context: src/uno
        build-args: |
          BASE_IMAGE=${{ inputs.base-tag }}

    - name: Run integration tests
      run: |
        make -C src/uno debtest
      env:
        DEBUG: ${{ runner.debug }}

    - name: Restore permissions changed by integration tests
      if: always()
      run: |
          make -C src/uno fix-file-ownership

    # Always collect and upload available test results
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: ${{ needs.config.outputs.TEST_ARTIFACT }}
        path: src/uno/test-results/*
      if: always()

