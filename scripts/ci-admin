#!/usr/bin/env python3
###############################################################################
# Copyright 2020-2024 Andrea Sorbini
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###############################################################################
# Example usage:
###############################################################################
#
# - list workflow runs for a repository:
#
#     ci-admin select-runs -r mentalsmash/uno [-f "<filter>"]
#
# - delete workflow runs for a repository:
#
#     ci-admin delete-runs -r mentalsmash/uno [-f "<filter>"]
#
# - list workflow runs for a PR:
#
#     ci-admin pr-runs -r mentalsmash/uno -N <PR-NUMBER>
#
# - Clean up workflow runs after a PR is closed:
#
#     ci-admin pr-closed -r mentalsmash/uno -N <PR-NUMBER> [--merged]
#
# - list packages for an organization (only containers supported for now):
#
#     ci-admin select-packages -o mentalsmash [-f "<filter>"]
#
# - list versions for a package (owned by an organization):
#
#     ci-admin select-versions -o uno -o mentalsmash [-f "<filter>"]
#
# - delete versions for a package (owned by an organization):
#
#     ci-admin delete-versions -o uno -o mentalsmash [-f "<filter>"]
#
###############################################################################
# Common arguments:
###############################################################################
# --interactive: dynamically select entries (requires a tty)
#        --noop: don't actually perform changes
###############################################################################
# Common arguments must be specified before the action
# (e.g. "ci-admin --interactive select-runs ...")
###############################################################################
import json
import os
import re
import sys
import subprocess
import argparse
import traceback
from functools import partial
from pathlib import Path
from typing import Generator, NamedTuple, TextIO, Protocol
from datetime import datetime

ScriptsDir = Path(__file__).parent
ScriptNoninteractiveRequired = not sys.stdin.isatty() or not sys.stdout.isatty()
ScriptNoninteractive = True

# GitHub API documentation: https://docs.github.com/en/rest/reference/packages
GitHubApiAccept = "application/vnd.github.v3+json"
# https://docs.github.com/en/rest/overview/api-versions?apiVersion=2022-11-28
GitHubApiVersion = "2022-11-28"

###############################################################################
# Global hooks to produce output to stdout, and possibly tabulate it
###############################################################################
TabulateEnabled = True
TabulateOutput = None
TabulateColumns = []


def tabulate_columns(*columns: list[str]) -> None:
  global TabulateColumns
  TabulateColumns.clear()
  TabulateColumns.extend(columns)


def output(*fields):
  global TabulateOutput
  global TabulateEnabled
  if TabulateEnabled and TabulateOutput is None:
    try:
      TabulateOutput = subprocess.Popen(
        ["column", "-t", "-s", "\t"], stdin=subprocess.PIPE, stderr=subprocess.PIPE
      )
      if TabulateColumns:
        columns = "\t".join(col.upper().replace("_", " ") for col in TabulateColumns)
        TabulateOutput.stdin.write(columns.encode())
        TabulateOutput.stdin.write("\n".encode())
    except Exception:
      # The process failed, assume column is not available
      # and don't try to tabulate again
      TabulateEnabled = False

  line = "\t".join(fields).strip()
  if not TabulateOutput:
    print(line)
  else:
    TabulateOutput.stdin.write(line.encode())
    TabulateOutput.stdin.write("\n".encode())


###############################################################################
# mini logger API
###############################################################################
ColorEnabled = sys.stderr.isatty() and not os.environ.get("NO_COLORS", False)
try:
  import termcolor
except Exception:
  ColorEnabled = False


def _log_msg(lvl, fmt, *args, **print_args) -> None:
  print_args.setdefault("file", sys.stderr)
  line = fmt.format(*args) if args else fmt
  line = f"[{lvl}]" + ("" if line.startswith("[") else " ") + line
  if ColorEnabled:
    color = {
      "D": "magenta",
      "A": "cyan",
      "I": "green",
      "W": "yellow",
      "E": "red",
    }[lvl]
    line = termcolor.colored(line, color)
  print(line, **print_args)


def _log_debug(*args, **print_args) -> None:
  return _log_msg("D", *args, **print_args)


def _log_activity(*args, **print_args) -> None:
  return _log_msg("A", *args, **print_args)


def _log_info(*args, **print_args) -> None:
  return _log_msg("I", *args, **print_args)


def _log_error(*args, **print_args) -> None:
  return _log_msg("E", *args, **print_args)


def _log_warning(*args, **print_args) -> None:
  return _log_msg("W", *args, **print_args)


def _log_command(cmd: list[str], shell: bool = False, check: bool = False, **print_args) -> None:
  import shlex

  if shell:
    cmd = ["sh", f"-{'e' if check else ''}c", *cmd]
  _log_debug("+ " + " ".join(["{}"] * len(cmd)), *(map(shlex.quote, cmd)), **print_args)


class LogFunction(Protocol):
  def __call__(self, *args, **print_args) -> None:
    pass


class LogCommandFunction(Protocol):
  def __call__(
    self, cmd: list[str], shell: bool = False, check: bool = False, **print_args
  ) -> None:
    pass


class Logger(NamedTuple):
  debug: LogFunction
  activity: LogFunction
  info: LogFunction
  warning: LogFunction
  error: LogFunction
  command: LogCommandFunction


log = Logger(_log_debug, _log_activity, _log_info, _log_warning, _log_error, _log_command)


###############################################################################
# Filter a list using fzf
###############################################################################
def fzf_filter(
  filter: str | None = None,
  inputs: list | None = None,
  keep_stdin_open: bool = False,
  prompt: str | None = None,
  noninteractive: bool = False,
) -> subprocess.Popen:
  noninteractive = noninteractive or ScriptNoninteractive
  if noninteractive:
    filter_arg = "--filter"
  else:
    filter_arg = "--query"

  if filter is None:
    filter = ""

  if prompt is None:
    prompt = ""
  # if prompt[-2:] != "> ":
  prompt += " (TAB: select, ESC: none)> "

  fzf_cmd = ["fzf", "-0", "--tac", "--no-sort", "--multi", "--prompt", prompt, filter_arg, filter]
  log.command(fzf_cmd)
  fzf = subprocess.Popen(fzf_cmd, stdout=subprocess.PIPE, stdin=subprocess.PIPE)
  if inputs:
    for run in inputs:
      line = str(run).strip()
      fzf.stdin.write(line.encode())
      fzf.stdin.write("\n".encode())
    if not keep_stdin_open:
      fzf.stdin.close()
  return fzf


###############################################################################
# Make a GH API call, filter the result with jq, and parse the resulting JSON
###############################################################################
def gh_api(
  url: str,
  jq_filter: str | None = None,
  default: object = None,
  noop: bool = False,
  query: bool = True,
  method: str = "GET",
) -> dict | list | None:
  cmd = [
    "gh api "
    f"-H 'Accept: {GitHubApiAccept}' "
    f"-H 'X-GitHub-Api-Version: {GitHubApiVersion}' "
    f"{('-X ' + method) if method else ''}"
    f"{url}"
  ]
  if jq_filter:
    cmd[0] += f" | jq '{jq_filter}'"
  log.command(cmd, shell=True, check=True)
  if not noop or query:
    result = subprocess.run(cmd, shell=True, check=True, stdout=subprocess.PIPE)
    if not result.stdout:
      return default
    return json.loads(result.stdout.decode())
  return default


###############################################################################
# Parse/print dates in the format used by the GH API
###############################################################################
def github_date_parse(date: str) -> datetime:
  return datetime.strptime(date, "%Y-%m-%dT%H:%M:%SZ")


def github_date_str(date: datetime) -> str:
  return date.strftime("%Y-%m-%dT%H:%M:%SZ")


###############################################################################
# Helper for data objects
###############################################################################
class DataObject:
  Parsers = {}

  @classmethod
  def build(cls, obj_cls: type[NamedTuple], *args) -> NamedTuple:
    cls.data_object(obj_cls)
    build_args = list(args)
    for i, arg in enumerate(args):
      if i in obj_cls.DatetimeFields:
        if not isinstance(arg, datetime):
          build_args[i] = github_date_parse(arg)
      elif isinstance(arg, str):
        build_args[i] = arg.strip()
    return obj_cls(*build_args)

  @classmethod
  def parse(cls, obj_cls: type[NamedTuple], obj_line: str) -> object | None:
    cls.data_object(obj_cls)
    try:
      parse_re = cls.Parsers[obj_cls]
      fields = parse_re.findall(obj_line)
      fields = fields[0]
      return cls.build(obj_cls, *fields)
    except Exception:
      log.error("failed to parse {}: '{}'", obj_cls.__qualname__, obj_line)
      traceback.print_exc()
      return None

  @classmethod
  def str(cls, obj: NamedTuple) -> str:
    fields = list(obj)
    for i in obj.DatetimeFields:
      fields[i] = github_date_str(fields[i])
    return "\t".join(map(str, fields))

  @classmethod
  def parse_re(cls, obj_cls: type[NamedTuple]) -> re.Pattern:
    # Parse a string of fields separated by tabs.
    assert len(obj_cls._fields) >= 1
    return re.compile(
      "".join(("^", *(r"([^\t]+)[\t]+" for i in range(len(obj_cls._fields) - 1)), r"(.*)", "$"))
    )

  @classmethod
  def data_object(cls, obj_cls: type[NamedTuple]) -> None:
    if obj_cls not in cls.Parsers:
      cls.Parsers[obj_cls] = cls.parse_re(obj_cls)


###############################################################################
# Shorthand for DataObject.parse()
###############################################################################
def parse(obj_cls: type[NamedTuple], package_line) -> NamedTuple:
  return DataObject.parse(obj_cls, package_line)


###############################################################################
# Shorthand for DataObject.build()
###############################################################################
def build(obj_cls: type[NamedTuple], *args) -> object | None:
  return DataObject.build(obj_cls, *args)


###############################################################################
# GitHub Workflow Run data object (parsed from query result)
###############################################################################
class WorkflowRun(NamedTuple):
  repo: str
  head_repo: str
  id: int
  created_at: datetime
  updated_at: datetime
  event: str
  status: str
  outcome: str
  name: str

  Current = ""
  DatetimeFields = [3, 4]
  SelectQuery = """\
def symbol:
  sub(""; "")? // "NULL" |
  sub("skipped"; "SKIP") |
  sub("success"; "GOOD") |
  sub("startup_failure"; "FAIL") |
  sub("cancelled"; "FAIL") |
  sub("failure"; "FAIL");

[ .workflow_runs[]
  | [
      .repository.full_name,
      .head_repository.full_name,
      .id,
      .created_at,
      .updated_at,
      .event,
      .status,
      (.conclusion | symbol),
      .name
    ] 
  ]
"""

  def __str__(self) -> str:
    return DataObject.str(self)

  @property
  def incomplete(self) -> bool:
    return self.status in ["in_progress", "queued", "requested", "waiting", "pending"]

  ###############################################################################
  #
  ###############################################################################
  def cancel(self, noop: bool = False) -> None:
    url = f"/repos/{self.repo}/actions/runs/{self.id}/cancel"
    gh_api(url, query=False, noop=noop)

  ###############################################################################
  # Query the list of workflow runs from a repository.
  # If no filter is specified, present the user with `fzf` to select targets.
  # Otherwise, run in unattended mode with the provided filter.
  # By default, the function will query GitHub and parse the result with jq.
  # Optionally, the list of runs can be read from a pregenerated file (or stdin),
  # or it can be passed explicitly with the `runs` parameter.
  ###############################################################################
  @classmethod
  def select(
    cls,
    repo: str,
    filter: str | None = None,
    input: str | None = None,
    runs: list["WorkflowRun"] | None = None,
    prompt: str | None = None,
    noninteractive: bool = False,
  ) -> list["WorkflowRun"]:
    def _read_and_parse_runs(input_stream: TextIO) -> list[WorkflowRun]:
      return [
        run
        for line in input_stream.readlines()
        for sline in [line.decode().strip()]
        if sline
        for run in [parse(cls, sline)]
        if run and run.id != cls.Current
      ]

    if runs:
      target_runs = runs
    elif input == "-":
      target_runs = _read_and_parse_runs(sys.stdin)
    elif input:
      input_file = Path(input)
      with input_file.open("r") as istream:
        target_runs = _read_and_parse_runs(istream)
    else:
      read_cmd = ["gh", "api", "--paginate", f"/repos/{repo}/actions/runs"]
      log.command(read_cmd)
      read_process = subprocess.Popen(read_cmd, stdout=subprocess.PIPE)
      jq_cmd = ["jq", WorkflowRun.SelectQuery]
      log.command(jq_cmd)
      result = subprocess.run(jq_cmd, stdin=read_process.stdout, stdout=subprocess.PIPE, check=True)
      target_runs = []
      if result.stdout:
        result = result.stdout.decode()
        run_entries = json.loads(result)
        target_runs.extend(
          DataObject.build(cls, *entry) for entry in run_entries if entry[2] != cls.Current
        )
    if prompt is None:
      prompt = "available runs"
    sorted_runs = partial(sorted, key=lambda r: r.created_at)
    fzf = fzf_filter(
      filter=filter, inputs=sorted_runs(target_runs), prompt=prompt, noninteractive=noninteractive
    )
    return sorted_runs(_read_and_parse_runs(fzf.stdout))

  ###############################################################################
  # Delete all (or a filtered subset) of the workflow runs from a repository,
  ###############################################################################
  @classmethod
  def delete(
    cls,
    repo: str,
    filter: str | None = None,
    noop: bool = False,
    input: str | None = None,
    runs: list["WorkflowRun"] | None = None,
    prompt: str | None = None,
  ) -> list["WorkflowRun"]:
    def _delete_run(run: WorkflowRun):
      if run.outcome == "NULL":
        run.cancel(noop=noop)
      delete_cmd = ["gh", "api", "-X", "DELETE", f"/repos/{repo}/actions/runs/{run.id}"]
      log.command(delete_cmd, check=True)
      if not noop:
        subprocess.run(delete_cmd, check=True)

    deleted = []
    if prompt is None:
      prompt = "runs to delete"
    for run in cls.select(repo, filter, input, runs, prompt=prompt):
      _delete_run(run)
      deleted.append(run)
    if noop:
      log.warning("[{}] {} runs selected but not actually deleted", repo, len(deleted))
    else:
      log.warning("[{}] {} runs DELETED", repo, len(deleted))
    return deleted


###############################################################################
# GitHub Package data object (parsed from query result)
###############################################################################
class Package(NamedTuple):
  id: str
  repository: str
  name: str
  visibility: str
  created_at: datetime
  updated_at: datetime

  DatetimeFields = [4, 5]

  def __str__(self) -> str:
    return DataObject.str(self)

  ###############################################################################
  # List available packages for the current user or an organization
  ###############################################################################
  @classmethod
  def select(
    cls,
    org: str | None = None,
    filter: str | None = None,
    package_type: str = "container",
    prompt: str | None = None,
    noninteractive: bool = False,
  ) -> list["Package"]:
    def _ls_packages() -> Generator[Package, None, None]:
      jq_filter = (
        "[ (.[] | [.id, .repository.full_name, .name, .visibility, .created_at, .updated_at]) ]"
      )
      url = (
        f"/orgs/{org}/packages?package_type={package_type}"
        if org
        else "/user/packages?package_type={package_type}"
      )
      log.activity("listing packages for {}", org if org else "current user")
      packages = gh_api(url, jq_filter, default=[])
      for pkg_entry in packages:
        pkg = build(cls, *pkg_entry)
        yield pkg

    def _read_and_parse_package(input_stream: TextIO) -> list[Package]:
      return [
        pkg
        for line in input_stream.readlines()
        for sline in [line.decode().strip()]
        if sline
        for pkg in [parse(cls, sline)]
        if pkg
      ]

    packages = list(_ls_packages())
    if prompt is None:
      prompt = "available packages"
    sort_packages = partial(sorted, key=lambda p: p.updated_at)
    fzf = fzf_filter(
      filter=filter, inputs=sort_packages(packages), prompt=prompt, noninteractive=noninteractive
    )
    return sort_packages(_read_and_parse_package(fzf.stdout))


###############################################################################
# GitHub PackageVersion data object (parsed from query result)
###############################################################################
class PackageVersion(NamedTuple):
  id: str
  name: str
  tags: tuple[str]
  created_at: datetime
  updated_at: datetime

  DatetimeFields = [3, 4]

  def __str__(self) -> str:
    return DataObject.str(self)

  ###############################################################################
  # List package versions
  ###############################################################################
  @classmethod
  def select(
    cls,
    package: str,
    org: str | None = None,
    filter: str | None = None,
    package_type: str = "container",
    prompt: str | None = None,
    noninteractive: bool = False,
  ) -> list[str]:
    def _ls_versions() -> Generator[PackageVersion, None, None]:
      jq_filter = "[ (.[] | [.id, .name, .metadata.container.tags, .created_at, .updated_at]) ]"
      url = (
        f"/orgs/{org}/packages/{package_type}/{package}/versions"
        if org
        else f"/user/packages/{package_type}/{package}/versions"
      )
      versions = gh_api(url, jq_filter, default=[])
      for version_entry in versions:
        version = build(cls, *version_entry)
        yield version

    def _read_and_parse_versions(input_stream: TextIO) -> list[PackageVersion]:
      return [
        pkg
        for line in input_stream.readlines()
        for sline in [line.decode().strip()]
        if sline
        for pkg in [parse(cls, sline)]
        if pkg
      ]

    versions = list(_ls_versions())
    if prompt is None:
      prompt = f"available versions for {package}"
    sort_versions = partial(sorted, key=lambda p: p.updated_at)
    fzf = fzf_filter(
      filter=filter, inputs=sort_versions(versions), prompt=prompt, noninteractive=noninteractive
    )
    return sort_versions(_read_and_parse_versions(fzf.stdout))

  ###############################################################################
  # Delete package versions
  ###############################################################################
  @classmethod
  def delete(
    cls,
    package: str,
    org: str | None = None,
    filter: str | None = None,
    package_type: str = "container",
    prompt: str | None = None,
    noninteractive: bool = False,
    noop: bool = False,
  ) -> list[str]:
    def _delete_version(version: PackageVersion):
      url = (
        f"/orgs/{org}/packages/{package_type}/{package}/versions/{version.id}"
        if org
        else f"/user/packages/{package_type}/{package}/versions/{version.id}"
      )
      delete_cmd = ["gh", "api", "-X", "DELETE", url]
      log.command(delete_cmd, check=True)
      subprocess.run(delete_cmd, check=True)

    deleted = []
    if prompt is None:
      prompt = "version to delete"
    for version in cls.select(package, org, filter, package_type, prompt, noninteractive):
      if not noop:
        _delete_version(version)
      deleted.append(version)
    package_label = package if not org else f"{org}/{package}"
    if noop:
      log.warning("[{}] {} version selected but not actually deleted", package_label, len(deleted))
    else:
      log.warning("[{}] {} runs DELETED", package_label, len(deleted))
    return deleted


###############################################################################
# Combine the result arrays of an action which deletes/keeps workflow runs
###############################################################################
def workflow_run_action_result(
  removed: list[WorkflowRun], preserved: list[WorkflowRun]
) -> list[tuple[bool, WorkflowRun]]:
  result = [*((True, run) for run in removed), *((False, run) for run in preserved)]
  return sorted(result, key=lambda v: v[1].created_at)


###############################################################################
# Perform cleanup procedures after on a closed Pull Request
###############################################################################
def pr_closed(
  repo: str, pr_no: int, merged: bool, noop: bool = False
) -> list[tuple[bool, WorkflowRun]]:
  all_runs = pr_runs(repo, pr_no, noninteractive=True)

  if not all_runs:
    log.warning("[{}][PR #{}] PR was closed without any workflow run", repo, pr_no)
    return []

  log.info("[{}][PR #{}] {} runs detected", repo, pr_no, len(all_runs))
  for i, run in enumerate(all_runs):
    log.info(" {}. {}", i + 1, run)

  if not merged:
    log.warning("[{}][PR #{}] deleting all {} runs for unmerged PR", pr_no, repo, len(all_runs))
    removed = WorkflowRun.delete(repo, noop=noop, runs=all_runs)
    preserved = [run for run in all_runs if run not in removed]
    return workflow_run_action_result(removed, preserved)

  log.activity("[{}][PR #{}] listing failed and skipped runs", repo, pr_no)
  removed = list(pr_runs(repo, pr_no, "'FAIL | 'SKIP | 'NULL", runs=all_runs, noninteractive=True))
  if not removed:
    log.info("[{}][PR #{}] no failed nor skipped runs", repo, pr_no)
  else:
    log.info("[{}][PR #{}] {} failed or skipped runs", repo, pr_no, len(removed))

  preserved = []

  log.activity("[{}][PR #{}] listing good 'basic validation' runs", repo, pr_no)
  basic_validation_runs = list(
    pr_runs(repo, pr_no, "'GOOD", "updated", runs=all_runs, noninteractive=True)
  )
  if not basic_validation_runs:
    log.warning("[{}][PR #{}] no good 'basic validation' run", repo, pr_no)
  else:
    basic_validation_delete = basic_validation_runs[:-1]
    log.info(
      "[{}][PR #{}] {} good 'basic validation' runs to delete",
      repo,
      pr_no,
      len(basic_validation_delete),
    )
    for i, run in enumerate(basic_validation_delete):
      log.info(" {}. {}", i, run)
    removed.extend(basic_validation_delete)
    basic_validation_run = basic_validation_runs[-1]
    log.info("[{}][PR #{}] 'basic validation' run: {}", repo, pr_no, basic_validation_run)
    preserved.append(basic_validation_run)

  log.activity("[{}][PR #{}] listing good 'full validation' runs", repo, pr_no)
  full_validation_runs = list(
    pr_runs(repo, pr_no, "'GOOD", "reviewed, 'approved", runs=all_runs, noninteractive=True)
  )
  if not full_validation_runs:
    log.error("[{}][PR #{}] no good 'full validation' run!", repo, pr_no)
    raise RuntimeError(f"no good 'full validation' run for PR #{pr_no} of {repo}")
  else:
    full_validation_delete = full_validation_runs[:-1]
    log.info(
      "[{}][PR #{}] {} good 'full validation' runs to delete",
      repo,
      pr_no,
      len(full_validation_delete),
    )
    for i, run in enumerate(full_validation_delete):
      log.info(" {}. {}", i, run)
    removed.extend(full_validation_delete)
    full_validation_run = full_validation_runs[-1]
    log.info("[{}][PR #{}] 'full validation' run: {}", repo, pr_no, full_validation_run)
    preserved.append(full_validation_run)

  if preserved:
    log.info("[{}][PR #{}] {} candidates for ARCHIVAL", repo, pr_no, len(preserved))
    if not ScriptNoninteractive:
      removed.extend(WorkflowRun.select(repo, runs=preserved, prompt="don't archive"))
  else:
    log.warning("[{}][PR #{}] no runs selected for ARCHIVAL", repo, pr_no)

  if removed:
    log.info("[{}][PR #{}] {} candidates for DELETION", repo, pr_no, len(removed))
    actually_removed = WorkflowRun.delete(repo, noop=noop, runs=removed)
  else:
    actually_removed = []
    log.info("[{}][PR #{}] no runs selected for DELETION", repo, pr_no)

  preserved.extend(run for run in removed if run not in actually_removed)

  if not actually_removed:
    log.info("[{}][PR #{}] no runs deleted", repo, pr_no)
  else:
    log.warning("[{}][PR #{}] {} runs DELETED", repo, pr_no, len(actually_removed))

  if not preserved:
    log.warning("[{}][PR #{}] no runs archived", repo, pr_no)
  else:
    log.warning("[{}][PR #{}] {} runs ARCHIVED", repo, pr_no, len(preserved))

  return workflow_run_action_result(actually_removed, preserved)


###############################################################################
# Perform cleanup procedures on a closed Pull Request
###############################################################################
def pr_runs(
  repo: str, pr_no: int, result: str | None = None, category: str | None = None, **select_args
) -> Generator[WorkflowRun, None, None]:
  filter = (
    f"{result+' ' if result else ''}'PR '#{pr_no} '[{category if category is not None else ''}"
  )
  select_args.setdefault("prompt", f"runs for PR #{pr_no}")
  return WorkflowRun.select(repo, filter, **select_args)


###############################################################################
# Nightly Release - periodic cleanup
###############################################################################
def nightly_cleanup(repo: str, noop: bool = False) -> None:
  preserved = []
  removed = []

  def _pick_preserved(runs: list[WorkflowRun]) -> list[WorkflowRun]:
    latest = runs[-1]
    result = [latest]
    if latest.outcome != "GOOD":
      latest_ok = next((run for run in reversed(runs) if run.outcome == "GOOD"), None)
      if latest_ok:
        result.append(latest_ok)
    return result

  def _scan_runs(run_type: str, filter: str, remove_all: bool = False) -> list[WorkflowRun]:
    runs = WorkflowRun.select(repo, filter, noninteractive=True)
    if not runs:
      log.warning("[{}] no {} detected", repo, run_type)
    else:
      log.info("[{}] {} {} runs detected", repo, run_type, len(runs))
      for i, run in enumerate(runs):
        log.info("[{}] {}. {}", repo, i, run)
      if not remove_all:
        preserved.extend(_pick_preserved(runs))
    for run in runs:
      if run in preserved:
        continue
      if run.incomplete:
        log.warning("[{}] not removing incomplete run: {}", repo, run)
        continue
      removed.append(run)
    return runs

  _ = _scan_runs("nighlty releases", "!'deb 'release !'cleanup '[nightly")
  _ = _scan_runs("nighlty DEB releases", "'deb 'release '[nightly")
  _ = _scan_runs(
    "nighlty release cleanup jobs", "!'deb 'release 'cleanup '[nightly", remove_all=True
  )

  if preserved:
    log.info("[{}] {} candidates for ARCHIVAL", repo, len(preserved))
    if not ScriptNoninteractive:
      removed.extend(WorkflowRun.select(repo, runs=preserved, prompt="don't archive"))
  else:
    log.warning("[{}] no candidates for ARCHIVAL", repo)

  if removed:
    log.warning("[{}] {} candidates for DELETION", repo, len(removed))
    actually_removed = WorkflowRun.delete(repo, noop=noop, runs=removed)
  else:
    log.info("[{}] no candidates for DELETION", repo)
    actually_removed = []

  preserved.extend(run for run in removed if run not in actually_removed)

  if not actually_removed:
    log.info("[{}] no runs deleted", repo)
  else:
    log.warning("[{}] {} runs DELETED", repo, len(actually_removed))

  if not preserved:
    log.warning("[{}] no runs archived", repo)
  else:
    log.warning("[{}] {} runs ARCHIVED", repo, len(preserved))

  return workflow_run_action_result(removed, preserved)


###############################################################################
# Command-line arguments parser
###############################################################################
def define_parser() -> argparse.ArgumentParser:
  parser = argparse.ArgumentParser("ci-admin")
  parser.set_defaults(action=None)

  parser.add_argument(
    "-n", "--noop", help="Don't make any changes if possible.", default=False, action="store_true"
  )

  parser.add_argument(
    "-R", "--raw", help="Don't process output (e.g. tabulate)", default=False, action="store_true"
  )

  parser.add_argument(
    "-i", "--interactive", help="Run in interactive mode.", default=False, action="store_true"
  )

  parser.add_argument("-c", "--current", help="Calling workflow id.", default=None)

  subparsers = parser.add_subparsers(dest="action")

  parser_pr_closed = subparsers.add_parser(
    "pr-closed", help="Clean up workflow runs for a closed PR."
  )
  parser_pr_closed.add_argument(
    "-r", "--repository", help="Target GitHub repository (owner/repo).", required=True
  )
  parser_pr_closed.add_argument("-N", "--number", help="PR number.", required=True, type=int)
  parser_pr_closed.add_argument(
    "-m", "--merged", help="The PR was merged.", default=False, action="store_true"
  )

  parser_pr_ls_runs = subparsers.add_parser("pr-runs", help="List existing workflow runs for a PR.")
  parser_pr_ls_runs.add_argument(
    "-r", "--repository", help="Target GitHub repository (owner/repo).", required=True
  )
  parser_pr_ls_runs.add_argument("-N", "--number", help="PR number.", required=True, type=int)

  parser_ls_runs = subparsers.add_parser(
    "select-runs", help="List all workflow runs, or a subset matching an fzf filter."
  )
  parser_ls_runs.add_argument(
    "-r", "--repository", help="Target GitHub repository (owner/repo).", required=True
  )
  parser_ls_runs.add_argument(
    "-f", "--filter", help="Custom zfz filter to run in unattended mode.", default=None
  )
  parser_ls_runs.add_argument(
    "-i",
    "--input",
    help="Read entries from the specified file instead of querying GitHub. "
    "Use - to read from stdin",
    default=None,
  )

  parser_delete_runs = subparsers.add_parser(
    "delete-runs", help="Delete all workflow runs, or a subset matching an fzf filter."
  )
  parser_delete_runs.add_argument(
    "-r", "--repository", help="Target GitHub repository (owner/repo).", required=True
  )
  parser_delete_runs.add_argument(
    "-f", "--filter", help="Custom zfz filter to run in unattended mode.", default=None
  )
  parser_delete_runs.add_argument(
    "-i",
    "--input",
    help="Read entries from the specified file instead of querying GitHub. "
    "Use - to read from stdin",
    default=None,
  )

  parser_ls_pkgs = subparsers.add_parser(
    "select-packages", help="List packages for an organization (or the current user)."
  )
  parser_ls_pkgs.add_argument("-o", "--org", help="Target GitHub organization.", default=None)
  parser_ls_pkgs.add_argument(
    "-f", "--filter", help="Custom zfz filter to run in unattended mode.", default=None
  )

  parser_ls_versions = subparsers.add_parser(
    "select-versions",
    help="List versions for a package owned by an organization (or the current user).",
  )
  parser_ls_versions.add_argument("-p", "--package", help="Target package.", required=True)
  parser_ls_versions.add_argument("-o", "--org", help="Target GitHub organization.", default=None)
  parser_ls_versions.add_argument(
    "-f", "--filter", help="Custom zfz filter to run in unattended mode.", default=None
  )

  parser_delete_versions = subparsers.add_parser(
    "delete-versions", help="Delete all workflow runs, or a subset matching an fzf filter."
  )
  parser_delete_versions.add_argument("-p", "--package", help="Target package.", required=True)
  parser_delete_versions.add_argument(
    "-o", "--org", help="Target GitHub organization.", default=None
  )
  parser_delete_versions.add_argument(
    "-f", "--filter", help="Custom zfz filter to run in unattended mode.", default=None
  )

  parser_nightly_cleanup = subparsers.add_parser(
    "nightly-cleanup", help="Clean up workflow runs for nightly releases"
  )
  parser_nightly_cleanup.add_argument(
    "-r", "--repository", help="Target GitHub repository (owner/repo).", required=True
  )

  return parser


###############################################################################
# Action dispatcher
###############################################################################
def dispatch_action(args: argparse.Namespace) -> None:
  try:
    if args.action == "pr-closed":
      result = pr_closed(
        repo=args.repository, pr_no=args.number, merged=args.merged, noop=args.noop
      )
      tabulate_columns("action", *WorkflowRun._fields)
      for removed, run in result:
        output("DEL" if removed else "KEEP", str(run))
    elif args.action == "pr-runs":
      tabulate_columns(*WorkflowRun._fields)
      for run in pr_runs(repo=args.repository, pr_no=args.number):
        output(str(run))
    elif args.action == "select-runs":
      tabulate_columns(*WorkflowRun._fields)
      for run in WorkflowRun.select(repo=args.repository, filter=args.filter, input=args.input):
        output(str(run))
    elif args.action == "delete-runs":
      tabulate_columns(*WorkflowRun._fields)
      for run in WorkflowRun.delete(
        repo=args.repository, filter=args.filter, noop=args.noop, input=args.input
      ):
        output(str(run))
    elif args.action == "select-packages":
      tabulate_columns(*Package._fields)
      for pkg in Package.select(org=args.org, filter=args.filter):
        output(str(pkg))
    elif args.action == "select-versions":
      tabulate_columns(*PackageVersion._fields)
      for version in PackageVersion.select(package=args.package, org=args.org, filter=args.filter):
        output(str(version))
    elif args.action == "delete-versions":
      tabulate_columns(*PackageVersion._fields)
      for run in PackageVersion.delete(
        package=args.package,
        org=args.org,
        filter=args.filter,
        noop=args.noop,
      ):
        output(str(run))
    elif args.action == "nightly-cleanup":
      tabulate_columns("action", *WorkflowRun._fields)
      for removed, run in nightly_cleanup(repo=args.repository, noop=args.noop):
        output("DEL" if removed else "KEEP", str(run))
    else:
      raise RuntimeError("action not implemented", args.action)
  finally:
    if TabulateOutput:
      TabulateOutput.stdin.close()


###############################################################################
# Script main()
###############################################################################
def main() -> None:
  parser = define_parser()
  args = parser.parse_args()

  if args.raw:
    global TabulateEnabled
    TabulateEnabled = False

  if args.interactive:
    if ScriptNoninteractiveRequired:
      raise RuntimeError("interactive requires a terminal")
    global ScriptNoninteractive
    ScriptNoninteractive = False

  if args.current:
    WorkflowRun.Current = args.current

  if not args.action:
    log.error("no action specified")
    parser.print_help()
    sys.exit(1)

  dispatch_action(args)


if __name__ == "__main__":
  main()
